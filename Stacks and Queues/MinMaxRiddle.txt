#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

vector<long> riddle(vector<long> arr) {
    int n = arr.size();
    int counter;
    vector <long> result(n);
    vector <int> window_span(n);
    int i = 0, j;

    while ( i < n ) {
        counter    = 1;
        
        while ( ( i+counter < n ) && ( arr[i+counter] >= arr[i] ) ) { 
            counter++;
        }
        
        window_span[i++] = counter;
    }

    i=(n-1);

    while ( i >= 0 ) { 
        counter = 0;
        
        while ( ( i-counter-1 >= 0 ) && ( arr[i-counter-1] >= arr[i] ) ) { 
            counter++;
        }
        
        window_span[i--] += counter;
    }

    for ( int i = 0 ; i < n ; i++ ) {
        result[ window_span[i] - 1 ] = max ( result[ window_span[i] - 1 ] , arr[i] );
    }

    for ( int i = n-2 ; i >=0 ; i-- ) {
        result[i] = max ( result[i+1] , result[i] );
    }

    return result;

}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string arr_temp_temp;
    getline(cin, arr_temp_temp);

    vector<string> arr_temp = split_string(arr_temp_temp);

    vector<long> arr(n);

    for (int i = 0; i < n; i++) {
        long arr_item = stol(arr_temp[i]);

        arr[i] = arr_item;
    }

    vector<long> res = riddle(arr);

    for (int i = 0; i < res.size(); i++) {
        fout << res[i];

        if (i != res.size() - 1) {
            fout << " ";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
