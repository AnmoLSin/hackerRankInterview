import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the largestRectangle function below.
    static long largestRectangle(int[] A) {
        int maxArea = 0;
        Stack<Integer> indexes = new Stack();
        int n = A.length;
        int i = 0;
        while(!indexes.empty() || i < n )
        {
            if(i < n && (indexes.empty() || A[i] > A[indexes.peek()] ))
            {
                indexes.push(i++);
            }
            else
            {
                int topIndex = indexes.pop();
                int width = indexes.empty() ? i : (i - indexes.peek() - 1);
                int currArea = A[topIndex] * width;
                if (currArea > maxArea)
                {
                    maxArea = currArea;
                }
            }
        }

        
        return maxArea;

    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] h = new int[n];

        String[] hItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int hItem = Integer.parseInt(hItems[i]);
            h[i] = hItem;
        }

        long result = largestRectangle(h);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
